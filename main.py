# 2. Реализовать поиск кратчайшего пути между парой заданных вершин на неориентированном связном графе.
# 3. Ответить на вопросы:
# Что является входом для алгоритма поиска кратчайшего пути на неориентированном связном графе, что – результатом работы?
# Какова его вычислительная сложность?
# Переносится ли поиск кратчайшего пути (и поиск в ширину) на ориентированные графы?



from collections import deque

def bfs(graph, start):
    visited = set()
    queue = deque([start])

    while queue:
        vertex = queue.popleft()
        if vertex not in visited:
            print(vertex, end=' ')
            visited.add(vertex)
            queue.extend(graph[vertex] - visited)

# Пример графа в виде словаря, где ключи - вершины, а значения - их соседи
graph = {
    'A': {'B', 'C'},
    'B': {'A', 'D', 'E'},
    'C': {'A', 'F'},
    'D': {'B'},
    'E': {'B', 'F'},
    'F': {'C', 'E'}
}

# Начинаем обход с вершины 'A'
print("Результат обхода в ширину:")
bfs(graph, 'A')